SERVER
-----------------------------------------------------------------------

Document setup.py and how it will be used to sync project with server
Document every library used for serverside



Database class built on top of Google Sheets (This is made so minimal changes are needed when we switch to a local database)

Data Getter module:
	Has an 'entry method' that gets called by startup module
	Gets data from Google Sheets using Database class
	Parses and packs data into a format that satisfies requirements and can be used by client and server
	Runs concurrently on seperate daemon thread
	Sends Google Sheets data to client periodically

Document data structure being sent from server to client
	
Figure out Command line interface module 
	Has an 'entry method' that gets called by startup module
	Runs on main thread after Startup thread finishes

Hosting module:
	Has an 'entry method' that gets called by startup module
	Has method/s that get called by data getter module to send data to clients
	Handles SocketIO events
	Hosts website
	Runs concurrently on seperate thread

Figure out Startup module:
	Main entry point
	Prints copyright message from GAPI credentials file
	Handles getting config files
	handles GAPI authorization
	Starts Hosting module on daemon seperate thread
	Starts Data getting module on daemon seperate thread
	Starts Command line module on non-daemon main thread

File structure layout:
	.pickle file named 'Cred.pickle'
		Contains GAPI credentials
		Contains copyright message displayed at beginning of program


------------------------------------------------------------------------
CLIENT
------------------------------------------------------------------------
		

UI element ID's:
	'title': Displays radiothon name in header
	'time_left': Gets updated every second. Displays radiothon end date minus the current time in header
	'start_date': Shows start date of radiothon in header
	'end_date': Shows end date of radiothon in header

	'goal_hourly': Displayed in white bubble inside 'Goals' tab
	'goal_daily': Displayed in white bubble inside 'Goals' tab
	'goal_weekly': Displayed in white bubble inside 'Goals' tab
	'goal_total': Displayed in white bubble inside 'Goals' tab

	'credit_pledge_amt': Displayed in white bubble above credit entry list
	'website_pledge_amt': Displayed in white bubble above website entry list
	'paid_pledge_amt': Displayed in white bubble above unpaid entry list
	'unpaid_pledge_amt': Displayed in white bubble above unpaid entry list
	
	'credit_list': Displays scrollable list of all First names, cities and amount donated from every donor who paid with a credit card
	'website_list': Displays scrollable list of all First names, cities and amount donated from every donor who paid using the website
	'paid_list': Displays scrollable list of all First names, cities and amount donated from every donor who has paid using invoices
	'unpaid_list': Displays scrollable list of all First names, cities and amount donated from every donor who has not paid using invoices

	'credit_total': Shows the total sum of all credit donations
	'website_total': Shows the total sum of all website donations
	'paid_invoice_total': Shows the total sum of all paid invoice donations
	'unpaid_invoice_total': Shows the total sum of all unpaid invoice donations

	'paid_total': Shows the total sum of all paid donations
	'full_total': Shows the total sum of all donations	

	'most_recent_donor': Displays the name of the most recent donor
	'most_recent_donation_amt': Displays amount most recent donor donated

Inline JS:
	Updates 'time_left' every second to count down to Radiothon end

Reciever module:
	Initializes SocketIO
	Recieves data sent from server via SocketIO
	Updates page to display data when data is recieved from server
	Updates webpage to display latest information from server

CalcData module:
	Calculates and deducts data from information sent by server
	Called by reciever module on update

